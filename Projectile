
using System;
using System.Collections.Generic;
using Sce.PlayStation.Core;
using Sce.PlayStation.Core.Graphics;
using Sce.PlayStation.Core.Imaging;
using Sce.PlayStation.Core.Input;
namespace StaticJump
{
	public class Projectile
	{

	    public enum bulletState {launched, hit};

		public bulletState currState;

		public enum Animation {scrolling , hitting};

		public Animation currAnim;

		private const float GRAVITY = 2.4f;

		private const long FRAME_DURATION = 60;

		private const int PROJECTILE_SIZE = 44;
		
		private int activeFrame;

		private long animationTimer;

		private GraphicsContext graphics;

		private Vector3 pos;

		private Sprite s;

		private bool IsAlive;

		private float speed;

		private enum Direction { Right, Left };

		private Direction dir;
		//private float weight; // something between 0 and 2.0f


		public Projectile (GraphicsContext gc, Vector3 pos, Texture2D tex, int dir)
		{
			graphics = gc;

			float Xpos = pos.X + 0.1f;
		    this.pos.Y = pos.Y;
			this.pos.X = Xpos;

			s = new Sprite(graphics, tex);

			s.Center = new Vector2(0.5f, 0.5f);
			s.Scale = new Vector2(0.8f,0.8f);

			s.Position.X = Xpos;
			s.Position.Y = pos.Y;
			
			s.Width = PROJECTILE_SIZE;
			s.Height = PROJECTILE_SIZE;

	        activeFrame = 0;

		    animationTimer = 0;

	    	IsAlive = true;

			speed = 6.0f;

			currAnim = Animation.scrolling;

			currState = bulletState.launched;

			if (dir == 0)
				this.dir = Direction.Right;
			else
				this.dir = Direction.Left;
		}


	     public Vector3 Pos
		{
			get { return pos; }
			set { pos = value; }
		}

		public bool Alive
		{
			 get { return IsAlive;}
			 set { IsAlive = value;}

		}

		public Rectangle Extents
		{
			get { return new Rectangle(pos.X, pos.Y, s.Width, s.Height); }	
		}

		#region Updating

		public void Update(long dt)
		{
			Move (dt);
			RunAnimation(dt);


			if (!IsAlive)
					currState = bulletState.launched;

			s.Position = Pos;

			Console.WriteLine(AppMain.debug ? "hit: " + IsAlive : null);
			Console.WriteLine(AppMain.debug ? "bullet Animation: " + currAnim : null);
		}

		private void Move(long dt)
		{
			if (dir == Direction.Right)
				Pos += new Vector3(speed, 0, 0);
			else 
				Pos += new Vector3(-speed, 0, 0);

				currAnim = Animation.scrolling;

		}


		
		#endregion	
		#region Animation

		private void RunAnimation(long dt)
		{
			switch (currAnim)
			{
			case Animation.scrolling: UpdateShootAnim(dt); break;
			}
		}

		private void UpdateShootAnim(long dt)
		{
			animationTimer+=dt;
			if (animationTimer > FRAME_DURATION)
			{
				activeFrame ++;
				animationTimer = 0;
			}
			
			if (activeFrame > 2)
			{
				activeFrame = 0;
			}	
		}
		

		#endregion

		#region Render


		public void Render()
		{
			switch (currAnim)
			{
			case Animation.scrolling:
				s.SetTextureCoord(activeFrame * PROJECTILE_SIZE,
			                      0,
			                      ((activeFrame+1) * PROJECTILE_SIZE)-1,
			                      PROJECTILE_SIZE);
				break;
			}

			s.Render();	
		}
		#endregion

		}	
	}

