//Credits
//Sounds
//	SweetNeo85 - "Wilhelm Scream" @ freesound.org

using System;
using System.Collections.Generic;
using System.Diagnostics;
using Sce.PlayStation.Core;
using Sce.PlayStation.Core.Environment;
using Sce.PlayStation.Core.Graphics;
using Sce.PlayStation.Core.Input;
using Sce.PlayStation.Core.Audio;

namespace StaticJump
{
	public class AppMain
	{
		public static bool debug = true;
		
		private static GraphicsContext graphics;
		private enum GameState { Menu, Playing, Paused };
		private static GameState currState;
		private static int totalPlatforms; 
		
		private static Random randGen;
		private static int randCoordY;
		private static int randNum;
		
		#region Sounds 
		
		private static SoundPlayer screamSP;
		private static Bgm bgm;
		private static BgmPlayer bgmp;
		
		#endregion
		
		
		
		
		#region Collections 
		
		private static List<Platform> platforms;
		private static List<Power> powers;
		private static List<Projectile> projectiles;
		private static List<Orb> orbs;
		
		#endregion
		
		
		
		#region Textures
		
		private static Texture2D platform1Tex;
		private static Texture2D platform1CrumbleTex;
		private static Texture2D playerTex;
		private static Texture2D jumpAttrTex;
		private static Texture2D chargeAttrTex;
		private static Texture2D bulletTex;
		private static Texture2D enemyTex;
		private static Texture2D powBox2Tex;
		private static Texture2D powBox3Tex;
		private static Texture2D powBox4Tex;
		private static Texture2D hudBarTex;
		private static Texture2D orbTex;
		private static Texture2D powerUnitTex;
		private static Texture2D empIconTex;
		private static Texture2D heatIconTex;
		private static Texture2D scatterIconTex;
		
		#endregion
		
		
		#region Menus
		
		private static MainMenu mainMenu;
		private static PauseMenu pauseMenu;
		
		#endregion
		
		
		#region Game Objects
		
		private static Platform platform;
		private static Background background;
		private static Player player;
		private static Power pow;
		private static Orb orb;
		private static Projectile projectile;
		private static GameLabel gameLabels;
		
		#endregion
		
		
		
		#region Timers
		
		private static Stopwatch clock;
		private static long startTime;
		private static long stopTime;
		private static long deltaTime;
		private static long unpauseTimer; //used for only allowing one restart within some time
		private static long shootTimer; // used to determine how often the player can shoot
		private static long screamTimer; //used to only allow the screamSP to play once
		
		#endregion
		
		
		
		#region Counters
		
		private static int difficultyCounter; //used to determine when to increase difficulty
		
		#endregion
		
		
		
		#region UI
		
		private static PlayerAttribute playerJumpPowerBar;
		private static PlayerAttribute playerChargePowerBar;
		private static Sprite hudBar;
		private static PowerUnit powerUnit;
		
		#endregion
		
		
		public static void Main (string[] args)
		{
			Initialize ();

			while (true) {
				startTime = clock.ElapsedMilliseconds;
				SystemEvents.CheckEvents ();
				Update ();
				Render ();
				stopTime = clock.ElapsedMilliseconds;
				deltaTime = stopTime - startTime;
			}
		}
		
		
		
		#region Initialization
		
		public static void Initialize ()
		{
			// Set up the graphics system
			graphics = new GraphicsContext ();
			randGen = new Random();
			clock = new Stopwatch();
			clock.Start();
			mainMenu = new MainMenu(graphics);
			
			Sound scream;
			scream = new Sound("Application/Sounds/wilhelm_scream.wav");
			screamSP = scream.CreatePlayer();
			screamSP.Volume = 0.15f;
			
			bgm = new Bgm("Application/Sounds/string5140bpm.mp3");
			bgmp = bgm.CreatePlayer();
			bgmp.Volume = 0.1f;
			bgmp.Loop = true;
			//bgmp.Play();
			
			currState = GameState.Menu;
		}
		
		private static void InitializeCollections()
		{
			platforms = new List<Platform>();
			powers = new List<Power>();
			projectiles = new List<Projectile>();
			orbs = new List<Orb>();
		}
		
		private static void InitializeTextures()
		{
			platform1Tex = new Texture2D("Application/Assets/platform1.png", false);
			playerTex = new Texture2D("Application/Assets/player_anim_sheet.png", false);
			jumpAttrTex = new Texture2D("Application/Assets/jumppower_attribute.png", false);
			chargeAttrTex = new Texture2D("Application/Assets/chargepowerbar_sheet.png", false);
			bulletTex = new Texture2D("Application/Assets/player_projectile_sheet.png", false);
			platform1CrumbleTex = new Texture2D("Application/Assets/platform1crumble.png",false);
			powBox2Tex = new Texture2D("Application/Assets/power_box2_sheet.png", false);
			powBox3Tex = new Texture2D("Application/Assets/power_box3_sheet.png", false);
			powBox4Tex = new Texture2D("Application/Assets/power_box4_sheet.png", false);
			hudBarTex = new Texture2D("Application/Assets/hudbar.png", false);
			orbTex = new Texture2D("Application/Assets/orb.png", false);
			powerUnitTex = new Texture2D("Application/Assets/power_unit.png", false);
			empIconTex = new Texture2D("Application/Assets/empshot_icon.png", false);
			heatIconTex = new Texture2D("Application/Assets/heatseeker_icon.png", false);
			scatterIconTex = new Texture2D("Application/Assets/scattershot_icon.png", false);
		}
		
		private static void InitializeObjects()
		{
			//Initially spawn enough for a double wide screen
			SpawnPlatforms(platform1Tex, totalPlatforms, 28, 150, graphics.Screen.Height - 100, 
			               (graphics.Screen.Width + graphics.Screen.Width / totalPlatforms) / totalPlatforms);
			SpawnPlatforms(platform1Tex, totalPlatforms-1, graphics.Screen.Width + 56, 150, graphics.Screen.Height - 100, 
			               (graphics.Screen.Width + graphics.Screen.Width / (totalPlatforms-1)) / (totalPlatforms-1));

			background = new Background(graphics, 0.4f);
			player = new Player(graphics, new Vector3(platforms[3].Pos.X, platforms[3].Pos.Y - 80, 0), playerTex);
			playerJumpPowerBar = new PlayerAttribute(graphics, new Vector3(graphics.Screen.Width / 2 + 300, graphics.Screen.Height - 24, 0), jumpAttrTex);
			playerJumpPowerBar.SetAttributeBarColor(1.0f, 1.0f, 0.0f, 1.0f);
			playerChargePowerBar = new PlayerAttribute(graphics, new Vector3(graphics.Screen.Width / 2 - 300, graphics.Screen.Height - 24, 0), chargeAttrTex);
			playerChargePowerBar.SetAttributeBarColor(0.0f, 1.0f, 1.0f, 1.0f);
			hudBar = new Sprite(graphics, hudBarTex);
			hudBar.Position = new Vector3(0, graphics.Screen.Height - 28, 0);
			powerUnit = new PowerUnit(graphics, new Vector3(32, graphics.Screen.Height - hudBar.Height - 32, 0), powerUnitTex, "power_unit");
			gameLabels = new GameLabel(graphics);
		}	
		
		private static void StartGame()
		{
			GC.Collect(); //Be sure all memory is deallocated before allocating more
			
			unpauseTimer = 0;
			shootTimer = 0;
			screamTimer = 0;
			totalPlatforms = 13;
			difficultyCounter = 0;
			
			InitializeCollections();
			InitializeTextures();
			InitializeObjects();
			
			currState = GameState.Playing;
		}
		
		#endregion
		
		
		
		#region Updating

		public static void Update ()
		{
			// Query gamepad for current state
			var gamePadData = GamePad.GetData (0);
			
			switch (currState)
			{
			case GameState.Menu: UpdateMenu(); break;	
			case GameState.Playing: UpdatePlaying(); break;
			case GameState.Paused: UpdatePaused(); break;
			}
		}
		
		private static void UpdateMenu()
		{
			mainMenu.Update(deltaTime);
			CheckMenuInput();
		}
		
		private static void UpdatePlaying()
		{
			foreach (Platform plat in platforms)
			{
				plat.Move();
				plat.UpdatePos();
			}
			player.Update(deltaTime);
			playerJumpPowerBar.UpdateAttribute(player.JumpPower, 1.05f, deltaTime);
			playerChargePowerBar.UpdateAttribute(player.ChargePower, 100.0f, deltaTime);
			SpawnProjectile();
			foreach (Projectile proj in projectiles)
			{
				proj.Update(deltaTime, powers);
			}
			foreach (Power p in powers)
			{
				p.Update(deltaTime);	
			}
			background.UpdateBackground();
			foreach (Orb o in orbs)
			{
				o.Follow(player.Pos, deltaTime);
			}
			UpdateDifficulty();
			
			powerUnit.Update();
			gameLabels.UpdateScore(player.Score);
			gameLabels.UpdateWeaponTimer(player.WeaponTimer);
			
			CheckCollisions();
			CheckForFallingPlatforms();
			CheckForExplodingPowers();
			SpawnOrbs();
			CheckForDeadObjects();
			CheckForCurrentPower();
			CheckForPulsingChargeBar();
			
			
			if (player.Pos.Y > graphics.Screen.Height)
			{
				screamTimer += deltaTime;
				if (screamTimer < 50)
					screamSP.Play();
			}
			
			
			CheckPlayInput();
						
			Console.WriteLine(debug ? "Platforms On Screen: " + totalPlatforms : null);
			Console.WriteLine(debug ? "Projectiles On Screen: " + projectiles.Count : null);
			Console.WriteLine(debug ? "Powers On Screen: " + powers.Count : null);
		}
		
		
		private static void SpawnPlatforms(Texture2D tex, int numObjects, int minX, int minY, int maxY, float minXDist)
		{
			for (int i = 0; i < numObjects; i++)
			{
				Console.WriteLine(debug ? "Platform Separation: " + minXDist : null);
				randCoordY = randGen.Next(minY, maxY);
				platform = new Platform(graphics, new Vector3(minX + i * minXDist, randCoordY, 0), tex, "platform");
				//Randomly give platforms hidden orbs
				platform.OrbCount = randGen.Next(0, 2);
				if (platform.OrbCount > 0)
				{
					platform.HasOrbs = true;
					platform.OrbCount = randGen.Next(3, 9);
				}
				platforms.Add(platform);
			}
			
		}
		
		private static void SpawnPowers()
		{
			randNum = randGen.Next(0, 3); //random choice of power type
			switch (randNum)
			{
			case 0:
				randNum = randGen.Next(platforms.Count / 2, platforms.Count);
				pow = new Power(graphics, new Vector3(platforms[randNum].Pos.X, platforms[randNum].Pos.Y - platforms[randNum].Extents.Height - 50, 0), 
			                         	 powBox2Tex, "green", platforms[platforms.Count-1].ScrollSpeed);
				powers.Add(pow);
				break;
			case 1:
				randNum = randGen.Next(platforms.Count / 2, platforms.Count);
				pow = new Power(graphics, new Vector3(platforms[randNum].Pos.X, platforms[randNum].Pos.Y - platforms[randNum].Extents.Height - 50, 0), 
			                         	 powBox3Tex, "pink", platforms[platforms.Count-1].ScrollSpeed);
				powers.Add(pow);
				break;
			case 2:
				randNum = randGen.Next(platforms.Count / 2, platforms.Count);
				pow = new Power(graphics, new Vector3(platforms[randNum].Pos.X, platforms[randNum].Pos.Y - platforms[randNum].Extents.Height - 50, 0), 
			                         	 powBox4Tex, "yellow", platforms[platforms.Count-1].ScrollSpeed);
				powers.Add(pow);
				break;
			}
		}
		
		private static void UpdateDifficulty()
		{			
			if (difficultyCounter / totalPlatforms == 1)
			{
				if (totalPlatforms > 8)
				{
					totalPlatforms--;	
					SpawnPlatforms(platform1Tex, totalPlatforms, graphics.Screen.Width + 28, 150, graphics.Screen.Height - 100, (graphics.Screen.Width + graphics.Screen.Width / totalPlatforms) / totalPlatforms);
					SpawnPowers();
				}
				else //totalPlatforms needs to add 1 to conform with the range of the list in CheckForDeadObjects()
				{
					SpawnPlatforms(platform1Tex, totalPlatforms+1, graphics.Screen.Width + 28, 150, graphics.Screen.Height - 100, (graphics.Screen.Width + graphics.Screen.Width / totalPlatforms) / totalPlatforms);
					SpawnPowers();
				}
				
				difficultyCounter = 0;
			}
		}
		
		private static void SpawnOrbs()
		{
			//from platforms
			
			foreach(Platform plat in platforms)
			{
				if (plat.currState == Platform.State.Crumbling && plat.HasOrbs)
				{
					for (int i = 0; i < plat.OrbCount; i++)
					{
						orb = new Orb(graphics, plat.Pos + new Vector3(randGen.Next(-40, 40), randGen.Next(-40, 40), 0), orbTex, "orb");
						orbs.Add(orb);
					}
					plat.HasOrbs = false;
				}
			}
		}
		
		private static void CheckForFallingPlatforms()
		{
			var gamePadData = GamePad.GetData(0);
			
			foreach(Platform plat in platforms)
			{
				if (plat.WillFall &&
				   (gamePadData.Buttons & GamePadButtons.Cross) == 0)
				{
					plat.ChangeTexture(platform1CrumbleTex);
					plat.currState = Platform.State.Crumbling;
				}
			}
		}
		
		private static void CheckForExplodingPowers()
		{
			var gamePadData = GamePad.GetData(0);
			
			foreach(Power p in powers)
			{
				if (p.WillExplode)
				{
					p.Explode();
				}
			}
		}
		
		private static void SpawnProjectile()
		{
			var gamePadData = GamePad.GetData(0);
			shootTimer += deltaTime;

			if ((gamePadData.Buttons & GamePadButtons.Square) != 0) //no projectile for emp bomb weapon
			{
				if (shootTimer > 500)
				{
					//spawn three if weapon type is scattershot
					if (player.currWeapon == Player.Weapon.ScatterShot)
					{
						for (int i = 0; i < 3; i++) //three bullets
						{
							projectile = new Projectile (graphics, new Vector3(player.Pos.X, player.Pos.Y, 0), bulletTex, (int)player.dir, i);
							projectile.currBulletType = Projectile.BulletType.Scattershot;
							projectiles.Add(projectile);
						}
					}
					else if (player.currWeapon == Player.Weapon.Heatseeker)
					{
						projectile = new Projectile (graphics, new Vector3(player.Pos.X, player.Pos.Y, 0), bulletTex, (int)player.dir, 1);
						projectile.currBulletType = Projectile.BulletType.Heatseeking;
						projectiles.Add(projectile);
					}
					else if (player.currWeapon == Player.Weapon.Default) //default wep
					{
						projectile = new Projectile (graphics, new Vector3(player.Pos.X, player.Pos.Y, 0), bulletTex, (int)player.dir, 1);
						projectiles.Add(projectile);
					}
					else
					{
						//destroy all targets onscreen
						foreach(Power p in powers)
							if (p.Pos.X > 0 && p.Pos.X < graphics.Screen.Width)
								p.Explode();
						
						player.currWeapon = Player.Weapon.Default;
					}
					
					shootTimer = 0;
				}
			}
			Console.WriteLine(debug ? "Projectile Count: " +projectiles.Count : null);
		}
		
		private static void CheckForCurrentPower()
		{
			if (player.currWeapon == Player.Weapon.Default)
				powerUnit.currPower = PowerUnit.Power.None;
		}
		
		private static void CheckForPulsingChargeBar()
		{
			if (player.ChargePower >= 96.0f)
				playerChargePowerBar.currState = PlayerAttribute.State.Pulsing;
			else
				playerChargePowerBar.currState = PlayerAttribute.State.Normal;
		}
		
		private static void UpdatePaused()
		{
			pauseMenu.Update(deltaTime);
			CheckPauseInput();
		}
		
		#endregion
		
		
		
		
		
		
		#region Collision Testing
		
		private static void CheckCollisions()
		{			
			CheckPlayerCollisions();
			CheckBulletCollisions();
			CheckPowerCollisions();
			CheckOrbCollision();
		}
		
		private static void CheckPlayerCollisions()
		{
			//Player on platforms 
			
			foreach (Platform plat in platforms)
			{
				if (Collides(player.Extents, plat.Extents) == true && plat.currState != Platform.State.Crumbling) // dont want to be able to jump on a platform in crumbling state
				{
					
					if (player.Pos.Y + player.Extents.Height / 2 >= plat.Pos.Y - plat.Extents.Height / 2 && 
					    player.Pos.Y + player.Extents.Height / 2 <= plat.Pos.Y - plat.Extents.Height / 2 + 10 &&
					    player.currState != Player.PlayerState.Jumping) // fall-through allowance
					{
						player.GroundedSpeed = plat.ScrollSpeed;
						player.Grounded = true;
						player.currState = Player.PlayerState.Stationary;
						//set platform state to will fall
						if (player.JumpPower >= 0.9f)
							plat.WillFall = true;
						
						break;
					}
				}
				else
				{
					if (player.JumpPower < 0.9f)
						plat.WillFall = false;   //When the player falls off the platform at full power, the last platform he was on will not fall
					
					player.Grounded = false;
				}
			}
			
			//Player on powers
			
			foreach (Power p in powers)
			{
				if (Collides(player.Extents, p.Extents) == true && p.currState != Power.State.Exploded)
				{
					if (player.Pos.Y + player.Extents.Height / 2 >= p.Pos.Y - p.Extents.Height / 2 && 
					    player.Pos.Y + player.Extents.Height / 2 <= p.Pos.Y - p.Extents.Height / 2 + 10 &&
					    player.currState != Player.PlayerState.Jumping) // fall-through allowance
					{
						player.GroundedSpeed = pow.ScrollSpeed;
						player.Grounded = true;
						player.currState = Player.PlayerState.Stationary;
						//set box to will explode
						if (player.JumpPower >= 0.9f)
							p.WillExplode = true;
						
						break;
					}
				}
				else
				{
					if (player.JumpPower < 0.9f)
						p.WillExplode = false; //when the player falls off the box at full power, the last box he was on will not explode
					
					//consider if currstate == power.exploded - ie there is a weapon icon in the box's place
					if (Collides(player.Extents, p.Extents) == true)
					{
						powerUnit.PowerEstablished = false;
						
						if (p.ObjectId == "green")
						{
							player.currWeapon = Player.Weapon.Empbomb;
							powerUnit.currPower = PowerUnit.Power.EMP;
							powerUnit.FadePowerIn(empIconTex);
						}
						else if (p.ObjectId == "pink")
						{
							player.currWeapon = Player.Weapon.Heatseeker;
							powerUnit.currPower = PowerUnit.Power.Heatseeker;
							powerUnit.FadePowerIn(heatIconTex);
						}
						else
						{
							player.currWeapon = Player.Weapon.ScatterShot;
							powerUnit.currPower = PowerUnit.Power.ScatterShot;
							powerUnit.FadePowerIn(scatterIconTex);
						}
						
						player.WeaponTimer = 0;
						
						p.Alive = false;
					}
				}
			}
		}
		
		private static void CheckBulletCollisions()
		{	
			//Bullet offscreen
			
			foreach (Projectile proj in projectiles)
			{
				if (proj.Pos.X > graphics.Screen.Width)
					proj.Alive = false;
				if (proj.Pos.X < -60)
					proj.Alive = false;
			}
			
			//Bullets on powers
			
			foreach (Projectile proj in projectiles)
			{
				foreach (Power p in powers)
				{
					if (Collides(proj.Extents, p.Extents) == true && p.currState != Power.State.Exploded)
					{
						proj.Alive = false;
						p.WillExplode = true;
					}
				}
			}
		}
		
		private static void CheckPowerCollisions()
		{
			//Powers on platforms
			
			foreach (Power p in powers)
			{
				foreach (Platform plat in platforms)
				{
					if (Collides(p.Extents, plat.Extents) == true)
					{
						p.Grounded = true;	
						break;
					}
					else
						p.Grounded = false;
				}
			}
		}
		
		private static void CheckOrbCollision()
		{
			//Orbs on player
			
			foreach(Orb o in orbs)
			{
				if (Vector3.Distance(o.Pos, player.Pos) < o.Extents.Width)
				{
					o.Alive = false;
					player.ChargePower += 5.0f;
					player.Score += 10;
				}
			}
		}
		
		private static bool Collides(Rectangle r1, Rectangle r2)
		{
			if (r1.Position.X + r1.Width / 2 < r2.Position.X - r2.Width / 2) 
				return false;
			if (r1.Position.X - r1.Width / 2 > r2.Position.X + r2.Width / 2)
				return false;
			if (r1.Position.Y + r1.Height / 2 < r2.Position.Y - r2.Height / 2)
				return false;
			if (r1.Position.Y - r1.Height / 2 > r2.Position.Y + r2.Height / 2)
				return false;
			
			return true;
		}
		
		#endregion
		
		
		
		
		
		#region Input
		
		private static void CheckPlayInput()
		{
			var gamePadData = GamePad.GetData(0);
			unpauseTimer += deltaTime;
			if (unpauseTimer >= 300)
			{
				if ((gamePadData.Buttons & GamePadButtons.Start) != 0)
				{
					pauseMenu = new PauseMenu(graphics);
					currState = GameState.Paused;
					unpauseTimer = 0;
				}
			}
		}
		
		private static void CheckMenuInput()
		{
			var gamePadData = GamePad.GetData(0);	 
			
			unpauseTimer += deltaTime;
			if (unpauseTimer >= 300)
			{
				if (mainMenu.menuState == MainMenu.MenuHighlights.StartGame && (gamePadData.Buttons & GamePadButtons.Start) != 0)
				{
					currState = GameState.Playing;
					StartGame();
					unpauseTimer = 0;
				}
			}

		}
		
		private static void CheckPauseInput()
		{
			var gamePadData = GamePad.GetData(0);
			unpauseTimer += deltaTime;
			if (unpauseTimer >= 300)
			{
				if (pauseMenu.pauseMenuState == PauseMenu.pauseMenuHighlights.Restart && (gamePadData.Buttons & GamePadButtons.Start) != 0)
				{
					StartGame ();
					currState = GameState.Playing;
					unpauseTimer = 0;
				}
				if (pauseMenu.pauseMenuState == PauseMenu.pauseMenuHighlights.Resume && (gamePadData.Buttons & GamePadButtons.Start) != 0)
				{
					currState = GameState.Playing;
					unpauseTimer = 0;
				}
				if (pauseMenu.pauseMenuState == PauseMenu.pauseMenuHighlights.Menu && (gamePadData.Buttons & GamePadButtons.Start) != 0)
				{	unpauseTimer = 0;
					mainMenu.menuState = MainMenu.MenuHighlights.StartGame;
					currState = GameState.Menu;
					
				}
			}
		}


		
		#endregion
		
		
		
		
		#region Garbage
		
		private static void CheckForDeadObjects()
		{
			//Platforms
			
			if (platforms[totalPlatforms].Pos.X < -56)
			{
				for (int z = totalPlatforms; z >= 0; z--)
				{
					platforms[z].Alive = false;
					platforms.RemoveAt(z);
					difficultyCounter++;
					Console.WriteLine(debug ? "Difficulty Counter: " +difficultyCounter : null);
				}
			}
			
			//Projectiles
			
			for (int i = projectiles.Count - 1; i >= 0; i--)
			{
				if (projectiles[i].Alive == false)
				{
					projectiles.RemoveAt(i);	
				}
			}
			
			//Powers
			
			foreach (Power p in powers)
			{
				if (p.Pos.X < -52)
					p.Alive = false;
			}
			
			for (int i = powers.Count - 1; i >= 0; i--)
			{
				if (powers[i].Alive == false)
					powers.RemoveAt(i);
			}
			
			// Orbs
			
			for (int i = orbs.Count - 1; i >= 0; i--)
				if (orbs[i].Alive == false)
					orbs.RemoveAt(i);
		}
		
		#endregion
		
		
		
		
		#region Rendering

		public static void Render ()
		{
			switch (currState)
			{
			case GameState.Menu: RenderMenu(); break;
			case GameState.Playing: RenderPlaying(); break;
			case GameState.Paused:  RenderPlaying(); break;
			}
		}
		
		private static void RenderMenu()
		{
			// Clear the screen
			graphics.SetClearColor (0.0f, 0.0f, 0.0f, 0.0f);
			graphics.Clear ();
			
			mainMenu.Render();
			
			// Present the screen
			graphics.SwapBuffers ();
		}
		
		private static void RenderPlaying()
		{
			// Clear the screen
			graphics.SetClearColor (0.0f, 0.0f, 0.0f, 0.0f);
			graphics.Clear ();
			
			background.Render();
			hudBar.Render();
			foreach (Platform ter in platforms)
			{
				ter.Render();	
			}
			foreach (Power p in powers)
			{
				p.Render();	
			}
			gameLabels.Render(); //only render if player weapon is not default
			powerUnit.Render();
			playerJumpPowerBar.Render();
			playerChargePowerBar.Render();
			player.Render();
			foreach (Projectile p in projectiles)
			{
				p.Render();	
			}
			foreach (Orb o in orbs)
			{
				o.Render();	
			}
			
			if (currState == GameState.Paused)
				RenderPaused();
			
			// Present the screen
			graphics.SwapBuffers ();
		}
		
		private static void RenderPaused()
		{
			pauseMenu.Render();
		}
		
		#endregion
	}
}
