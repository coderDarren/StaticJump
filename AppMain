//Credits
//Sounds
//	SweetNeo85 - "Wilhelm Scream" @ freesound.org

using System;
using System.Collections.Generic;
using System.Diagnostics;
using Sce.PlayStation.Core;
using Sce.PlayStation.Core.Environment;
using Sce.PlayStation.Core.Graphics;
using Sce.PlayStation.Core.Input;
using Sce.PlayStation.Core.Audio;

namespace StaticJump
{
	public class AppMain
	{
		public static bool debug = true;
		
		private static GraphicsContext graphics;
		private enum GameState { Menu, Playing, Paused };
		private static GameState currState;
		private static int totalPlatforms; //difficulty guage
		
		private static Random randGen;
		private static int randCoordX;
		private static int randCoordY;
		private static int allowDifficultyIncrease;
		
		#region Sounds 
		
		private static SoundPlayer screamSP;
		
		#endregion
		
		
		
		
		#region Collections 
		
		private static List<Platform> platforms;
		private static List<Power> powers;
		private static List<Projectile> projectiles;
		
		#endregion
		
		
		
		#region Textures
		
		private static Texture2D platform1Tex;
		private static Texture2D platform1CrumbleTex;
		private static Texture2D power1Tex;
		private static Texture2D bg1Tex; //background
		private static Texture2D mg1Tex; //midground
		private static Texture2D playerTex;
		private static Texture2D attributeBarTex;
		private static Texture2D bulletTex;
		
		#endregion
		
		
		#region Menus
		
		private static MainMenu mainMenu;
		
		#endregion
		
		
		#region Game Objects
		
		private static Platform platform;
		private static Power power;
		private static Background background;
		private static Background midground;
		private static Player player;
		private static Scoreboard scoreLabel;
		private static Projectile projectile;
		
		#endregion
		
		
		
		#region Timers
		
		private static Stopwatch clock;
		private static long startTime;
		private static long stopTime;
		private static long deltaTime;
		private static long restartTimer; //used for only allowing one restart within some time
		private static long shootTimer; // used to determine how often the player can shoot
		private static long screamTimer; //used to only allow the screamSP to play once
		
		#endregion
		
		
		
		#region Counters
		
		private static int difficultyCounter; //used to determine when to increase difficulty
		
		#endregion
		
		
		
		#region UI
		
		private static PlayerAttribute playerJumpPowerBar;
		private static PlayerAttribute playerChargePowerBar;
		
		#endregion
		
		
		public static void Main (string[] args)
		{
			Initialize ();

			while (true) {
				startTime = clock.ElapsedMilliseconds;
				SystemEvents.CheckEvents ();
				Update ();
				Render ();
				stopTime = clock.ElapsedMilliseconds;
				deltaTime = stopTime - startTime;
			}
		}
		
		
		
		#region Initialization
		
		public static void Initialize ()
		{
			// Set up the graphics system
			graphics = new GraphicsContext ();
			randGen = new Random();
			clock = new Stopwatch();
			clock.Start();
			mainMenu = new MainMenu(graphics);
			
			Sound scream;
			scream = new Sound("Application/Sounds/wilhelm_scream.wav");
			screamSP = scream.CreatePlayer();
			screamSP.Volume = 0.5f;
			
			currState = GameState.Menu;
		}
		
		private static void InitializeCollections()
		{
			platforms = new List<Platform>();
			powers = new List<Power>();
			projectiles = new List<Projectile>();
		}
		
		private static void InitializeTextures()
		{
			platform1Tex = new Texture2D("Application/Assets/platform1.png", false);
			//power1Tex = new Texture2D("Application/Assets/diamond.png", false);
			bg1Tex = new Texture2D("Application/Assets/background1.png", false);
			mg1Tex = new Texture2D("Application/Assets/midground1.png", false);
			playerTex = new Texture2D("Application/Assets/player_anim_sheet.png", false);
			attributeBarTex = new Texture2D("Application/Assets/attribute_bar.png", false);
			bulletTex = new Texture2D("Application/Assets/player_projectile_sheet.png", false);
			platform1CrumbleTex = new Texture2D("Application/Assets/platform1crumble.png",false);
		}
		
		private static void InitializeObjects()
		{
			//Initially spawn enough for a double wide screen
			SpawnPlatforms(platform1Tex, totalPlatforms, 0, 100, graphics.Screen.Height - 100, 
			               (graphics.Screen.Width + graphics.Screen.Width / totalPlatforms) / totalPlatforms);
			SpawnPlatforms(platform1Tex, totalPlatforms-1, graphics.Screen.Width + 56, 100, graphics.Screen.Height - 100, 
			               (graphics.Screen.Width + graphics.Screen.Width / (totalPlatforms-1)) / (totalPlatforms-1));

			background = new Background(graphics, bg1Tex, 0.2f);
			midground = new Background(graphics, mg1Tex, 0.4f);
			player = new Player(graphics, new Vector3(platforms[3].Pos.X, platforms[3].Pos.Y - 40, 0), playerTex);
			scoreLabel = new Scoreboard(graphics);
			playerJumpPowerBar = new PlayerAttribute(graphics, new Vector3(130, graphics.Screen.Height - 40, 0), attributeBarTex);
			playerJumpPowerBar.SetAttributeBarColor(1.0f, 1.0f, 0.0f, 1.0f);
			playerChargePowerBar = new PlayerAttribute(graphics, new Vector3(130, graphics.Screen.Height - 20, 0), attributeBarTex);
			playerChargePowerBar.SetAttributeBarColor(0.0f, 1.0f, 1.0f, 1.0f);
		}	
		
		private static void StartGame()
		{
			restartTimer = 0;
			shootTimer = 0;
			screamTimer = 0;
			totalPlatforms = 12;
			difficultyCounter = 0;
			allowDifficultyIncrease = 0;
			
			InitializeCollections();
			InitializeTextures();
			InitializeObjects();
			
			currState = GameState.Playing;
		}
		
		#endregion
		
		
		
		#region Updating

		public static void Update ()
		{
			// Query gamepad for current state
			var gamePadData = GamePad.GetData (0);
			
			switch (currState)
			{
			case GameState.Menu: UpdateMenu(); break;	
			case GameState.Playing: UpdatePlaying(); break;
			case GameState.Paused: UpdatePaused(); break;
			}
			
			CheckPlayInput();
		}
		
		private static void UpdateMenu()
		{
			mainMenu.Update(deltaTime);
			CheckMenuInput();
		}
		
		private static void UpdatePlaying()
		{
			foreach (Platform plat in platforms)
			{
				plat.Move();
				plat.UpdatePos();
			}
			player.Update(deltaTime);
			playerJumpPowerBar.UpdateAttribute(player.JumpPower, 1.0f);
			playerChargePowerBar.UpdateAttribute(player.JumpPower, 5.0f);
			UpdateProjectile();
			foreach (Projectile proj in projectiles)
			{
				proj.Update(deltaTime);
			}
			UpdateDifficulty();
			background.UpdateBackground();
			midground.UpdateBackground();
			
			scoreLabel.UpdateScore(player.Score);
			
			if (player.Pos.Y > graphics.Screen.Height)
			{
				screamTimer += deltaTime;
				if (screamTimer < 50)
					screamSP.Play();
			}
			
			CheckCollisions();
			CheckForFallingPlatforms();
			CheckForDeadObjects();
			Console.WriteLine(debug ? "Difficulty Increase Counter: " + allowDifficultyIncrease : null);
			Console.WriteLine(debug ? "Platforms On Screen: " + totalPlatforms : null);
		}
		
		
		//Thanks Trevor Love!
		private static void SpawnPlatforms(Texture2D tex, int numObjects, int minX, int minY, int maxY, float minXDist)
		{
			for (int i = 0; i < numObjects; i++)
			{
				Console.WriteLine(debug ? "Platform Separation: " + minXDist : null);
				randCoordY = randGen.Next(minY, maxY);
				platform = new Platform(graphics, new Vector3(minX + i * minXDist, randCoordY, 0), tex, "platform");
				platforms.Add(platform);
			}
		}
		
		private static void UpdateDifficulty()
		{			
			if (difficultyCounter / totalPlatforms == 1)
			{
				if (totalPlatforms > 6)
				{
					totalPlatforms--;	
					SpawnPlatforms(platform1Tex, totalPlatforms, graphics.Screen.Width, 100, graphics.Screen.Height - 50, (graphics.Screen.Width + graphics.Screen.Width / totalPlatforms) / totalPlatforms);
				}
				else //totalPlatforms needs to add 1 to conform with the range of the list in CheckForDeadObjects()
				{
					SpawnPlatforms(platform1Tex, totalPlatforms+1, graphics.Screen.Width, 100, graphics.Screen.Height - 100, (graphics.Screen.Width + graphics.Screen.Width / totalPlatforms) / totalPlatforms);
				}
				
				allowDifficultyIncrease++;
				difficultyCounter = 0;
			}
		}
		
		private static void CheckForFallingPlatforms()
		{
			var gamePadData = GamePad.GetData(0);
			
			foreach(Platform plat in platforms)
			{
				if (plat.WillFall &&
				   (gamePadData.Buttons & GamePadButtons.Cross) == 0)
				{
					plat.ChangeTexture(platform1CrumbleTex);
					plat.currState = Platform.State.Crumbling;
				}
			}
		}
		
		private static void UpdateProjectile()
		{
			var gamePadData = GamePad.GetData(0);
			shootTimer += deltaTime;

			if ((gamePadData.Buttons & GamePadButtons.Square) != 0)
			{
				if (shootTimer > 500)
				{
				projectiles.Add(new Projectile (graphics, new Vector3(player.Pos.X, player.Pos.Y, 0), bulletTex, (int)player.dir));
				shootTimer = 0;
				}
			}
			Console.WriteLine(debug ? "Projectile Count: " +projectiles.Count : null);
		}
		
		private static void UpdatePaused()
		{}
		
		#endregion
		
		
		
		
		
		
		#region Collision Testing
		
		private static void CheckCollisions()
		{			
			foreach (Platform plat in platforms)
			{
				if (Collides(player.Extents, plat.Extents) == true && plat.currState != Platform.State.Crumbling) // dont want to be able to jump on a platform in crumbling state
				{
					
					if (player.Pos.Y + player.Extents.Height / 2 >= plat.Pos.Y && 
					    player.Pos.Y + player.Extents.Height / 2 <= plat.Pos.Y + 5) // fall-through allowance
					{
						player.GroundedSpeed = plat.ScrollSpeed;
						player.Grounded = true;
						player.currState = Player.PlayerState.Stationary;
						//set platform state to will fall
						if (player.JumpPower >= 0.9f)
							plat.WillFall = true;
						
						break;
					}
				}
				else
				{
					if (player.JumpPower < 0.9f)
						plat.WillFall = false;   //When the player falls off the platform at full power, the last platform he was on will not fall
					
					player.Grounded = false;
				}
			}
		}
		
		private static void CheckBulletCollisions()
		{	
			foreach (Platform plat in platforms)
			{

				foreach (Projectile proj in projectiles)
				{
					if (Collides(proj.Extents, plat.Extents) == true)
					{
						proj.Alive = false;

					}
				}
			}
		}
		
		//Made for player on platforms
		private static bool Collides(Rectangle r1, Rectangle r2)
		{
			if (r1.Position.X + r1.Width / 2 < r2.Position.X)
				return false;
			if (r1.Position.X - r1.Width / 2 > r2.Position.X + r2.Width)
				return false;
			if (r1.Position.Y + r1.Height / 2 < r2.Position.Y)
				return false;
			if (r1.Position.Y - r1.Height / 2 > r2.Position.Y + r2.Height)
				return false;
			
			return true;
		}
		
		#endregion
		
		
		
		
		
		#region Input
		
		private static void CheckPlayInput()
		{
			var gamePadData = GamePad.GetData(0);
			
			restartTimer += deltaTime;
			if ((gamePadData.Buttons & GamePadButtons.Start) != 0)
			{
				if (restartTimer > 300)
				{
					StartGame();
					restartTimer = 0;
				}
			}
		}
		
		private static void CheckMenuInput()
		{
			var gamePadData = GamePad.GetData(0);	
			
			if ((gamePadData.Buttons & GamePadButtons.Select) != 0)
			{
				currState = GameState.Playing;
				StartGame();
			}
		}
		
		#endregion
		
		
		
		
		#region Garbage
		
		private static void CheckForDeadObjects()
		{
			if (platforms[totalPlatforms].Pos.X < -56)
			{
				for (int z = totalPlatforms; z >= 0; z--)
				{
					platforms[z].Alive = false;
					platforms.RemoveAt(z);
					difficultyCounter++;
					Console.WriteLine(debug ? "Difficulty Counter: " +difficultyCounter : null);
				}
			}
		}
		
		#endregion
		
		
		
		
		#region Rendering

		public static void Render ()
		{
			switch (currState)
			{
			case GameState.Menu: RenderMenu(); break;
			case GameState.Playing: RenderPlaying(); break;
			case GameState.Paused: RenderPaused(); break;
			}
		}
		
		private static void RenderMenu()
		{
			// Clear the screen
			graphics.SetClearColor (0.0f, 0.0f, 0.0f, 0.0f);
			graphics.Clear ();
			
			mainMenu.Render();
			
			// Present the screen
			graphics.SwapBuffers ();
		}
		
		private static void RenderPlaying()
		{
			// Clear the screen
			graphics.SetClearColor (0.0f, 0.0f, 0.0f, 0.0f);
			graphics.Clear ();
			
			background.Render();
			midground.Render();
			foreach (Platform ter in platforms)
			{
				ter.Render();	
			}
			scoreLabel.Render();
			playerJumpPowerBar.Render();
			playerChargePowerBar.Render();
			player.Render();
			foreach (Projectile p in projectiles)
			{
				p.Render();	
			}
			
			// Present the screen
			graphics.SwapBuffers ();
		}
		
		private static void RenderPaused()
		{
			// Clear the screen
			graphics.SetClearColor (0.0f, 0.0f, 0.0f, 0.0f);
			graphics.Clear ();

			// Present the screen
			graphics.SwapBuffers ();
		}
		
		#endregion
	}
}
